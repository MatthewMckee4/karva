name: Continuous Integration

on:
  pull_request:
  push:
    branches:
      - main

jobs:
  pre-commit:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-python@v3
      - uses: pre-commit/action@v3.0.1

  cargo-test:
    runs-on: ${{ matrix.os }}
    strategy:
      max-parallel: 12
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
    steps:
      - uses: actions/checkout@v4
      - uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          override: true
      - name: Run Cargo Tests
        uses: actions-rs/cargo@v1
        with:
          command: test
          args: --no-default-features

  build:
    name: python${{ matrix.python-version }}-${{ matrix.platform.python-architecture }} ${{ matrix.platform.os }} ${{ matrix.msrv }}
    runs-on: ${{ matrix.platform.os }}
    strategy:
      fail-fast: false # If one platform fails, allow the rest to keep testing.
      matrix:
        rust: [stable]
        python-version:
          [
            "3.9",
            "3.10",
            "3.11",
            "3.12",
            "3.13",
            "3.13t",
            "pypy-3.9",
            "pypy-3.10",
          ]
        platform:
          [
            {
              os: "macos-latest",
              python-architecture: "arm64",
              rust-target: "aarch64-apple-darwin",
            },
            {
              os: "ubuntu-latest",
              python-architecture: "x64",
              rust-target: "x86_64-unknown-linux-gnu",
            },
            {
              os: "windows-latest",
              python-architecture: "x64",
              rust-target: "x86_64-pc-windows-msvc",
            },
          ]
        exclude:
          # PyPy doesn't release 32-bit Windows builds any more
          - python-version: pypy-3.9
            platform: { os: "windows-latest", python-architecture: "x86" }
        include:
          # Test minimal supported Rust version
          - rust: 1.63.0
            python-version: "3.13"
            platform:
              {
                os: "ubuntu-latest",
                python-architecture: "x64",
                rust-target: "x86_64-unknown-linux-gnu",
              }
            msrv: "MSRV"

          # Test the `nightly` feature
          - rust: nightly
            python-version: "3.13"
            platform:
              {
                os: "ubuntu-latest",
                python-architecture: "x64",
                rust-target: "x86_64-unknown-linux-gnu",
              }
            msrv: "nightly"
            extra_features: "nightly"

          # Test 32-bit windows just on latest Python
          - rust: stable
            python-version: "3.13"
            platform:
              {
                os: "windows-latest",
                python-architecture: "x86",
                rust-target: "i686-pc-windows-msvc",
              }

    steps:
      - uses: actions/checkout@v4

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
          architecture: ${{ matrix.platform.python-architecture }}

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: ${{ matrix.rust }}
          target: ${{ matrix.platform.rust-target }}

      - name: Build
        run: cargo build  --verbose --target ${{ matrix.platform.rust-target }}

  build-docs:
    runs-on: ${{ matrix.os }}
    strategy:
      max-parallel: 12
      matrix:
        python-version: ["3.11"]
        os: [ubuntu-latest]
    steps:
      - uses: actions/checkout@v4
      - uses: astral-sh/setup-uv@v5
        with:
          python-version: ${{ matrix.python-version }}
      - name: Install Dependencies
        run: uv sync --all-extras
      - name: Run Tests
        run: make docs
