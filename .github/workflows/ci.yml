name: Continuous Integration

on:
  pull_request:
  push:
    branches:
      - main
  workflow_dispatch:

jobs:
  pre-commit:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - uses: actions/setup-python@v3

      - uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          override: true

      - name: Install Rustfmt nightly
        run: |
          rustup component add rustfmt --toolchain nightly

      - uses: pre-commit/action@v3.0.1

  cargo-test:
    runs-on: ${{ matrix.os }}
    strategy:
      max-parallel: 12
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        python-version: ["3.13"]
    steps:
      - uses: actions/checkout@v4

      - name: Update Rust toolchain
        run: rustup update

      - uses: astral-sh/setup-uv@v5
        with:
          python-version: ${{ matrix.python-version }}

      - name: Set up Python
        uses: actions/setup-python@v4
        id: setup-python
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install Python dependencies
        run: |
          pip install pytest

      - name: Build wheels
        uses: PyO3/maturin-action@v1
        with:
          command: build

      - name: Run tests
        env:
          PYO3_PYTHON: ${{ steps.setup-python.outputs.python-path }}
        run: |
          cargo test

  build-docs:
    runs-on: ${{ matrix.os }}
    strategy:
      max-parallel: 12
      matrix:
        python-version: ["3.11"]
        os: [ubuntu-latest]
    steps:
      - uses: actions/checkout@v4

      - uses: astral-sh/setup-uv@v5
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install Dependencies
        run: uv sync --group docs --no-install-project

      - name: Build docs
        run: uv run --no-project mkdocs build

  benchmarks:
    name: Run benchmarks
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - uses: moonrepo/setup-rust@v1
        with:
          channel: stable
          cache-target: release
          bins: cargo-codspeed

      - name: Setup Python
        uses: actions/setup-python@v4
        id: setup-python
        with:
          python-version: 3.13

      - name: Delete .gitignore
        run: rm -f .gitignore

      - uses: astral-sh/setup-uv@v5
        id: setup-uv
        with:
          python-version: 3.13

      - name: Build wheels
        run: |
          uv venv
          uv pip install maturin pytest
          uv run --no-project maturin build

      - name: Generate resources
        run: uv run --no-project crates/karva_benchmark/resources/generate.py

      - name: Build benchmarks
        env:
          PYO3_PYTHON: ${{ env.VIRTUAL_ENV }}/bin/python
        run: uv run --no-project cargo codspeed build --features codspeed -p karva_benchmark

      - name: Run benchmarks
        env:
          PYO3_PYTHON: ${{ env.VIRTUAL_ENV }}/bin/python
        uses: CodSpeedHQ/action@v3
        with:
          token: ${{ secrets.CODSPEED_TOKEN }}
          run: uv run --no-project cargo codspeed run

  coverage:
    runs-on: ubuntu-latest

    env:
      CARGO_TERM_COLOR: always

    steps:
      - uses: actions/checkout@v4

      - uses: astral-sh/setup-uv@v5
        with:
          python-version: 3.13

      - name: Set up Python
        uses: actions/setup-python@v4
        id: setup-python
        with:
          python-version: 3.13

      - name: Install Python dependencies
        run: |
          pip install pytest

      - name: Build wheels
        uses: PyO3/maturin-action@v1
        with:
          command: build

      - name: Install Rust
        run: rustup update stable

      - name: Install cargo-llvm-cov
        uses: taiki-e/install-action@cargo-llvm-cov

      - name: Generate code coverage
        run: cargo llvm-cov --all-features --package karva_core --package karva_project --package karva_cli --lcov --output-path lcov.info

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v5
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          files: lcov.info
          fail_ci_if_error: true

  python-test:
    name: python-test-${{ matrix.folder }}-${{ matrix.os }}-${{ matrix.python-version }}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        python-version: ["3.9", "3.13"]
        folder: ["tests/example"]
        os: [ubuntu-latest, macos-latest, windows-latest]
    steps:
      - uses: actions/checkout@v4

      - uses: astral-sh/setup-uv@v5
        with:
          python-version: ${{ matrix.python-version }}

      - name: Setup karva environment
        run: |
          uv venv
          uv pip install pytest

      - name: Setup integration test environment
        run: |
          cd ${{ matrix.folder }}
          uv venv
          uv sync
          uv pip install -e ../../

      - name: Run karva test
        run: |
          cd ${{ matrix.folder }}
          uv run --with pytest karva test -v -s
